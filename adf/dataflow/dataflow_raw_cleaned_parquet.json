{
	"name": "dataflow_raw_cleaned_parquet",
	"properties": {
		"folder": {
			"name": "raw to cleaned"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_parquet_datalake_landing",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     file_name as string",
				"}",
				"source(output(",
				"          ORDER_ID as string,",
				"          ORDER_DATETIME as string,",
				"          CUSTOMER_ID as string,",
				"          ORDER_STATUS as string,",
				"          STORE_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     rowUrlColumn: '\"file_name\"',",
				"     format: 'parquet') ~> source1",
				"source1 derive(order_date = concat(substring(ORDER_DATETIME, 8, 2), '-', \r",
				"              substring(ORDER_DATETIME, 4, 3), '-', \r",
				"              substring(ORDER_DATETIME, 1, 2)),",
				"          updated_timestamp = currentUTC()) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     fileSystem: 'cleansed',",
				"     folderPath: (concat(concat(substring($file_name,1,instr($file_name,'.')-1),'/'),toString(currentDate('UTC'),'yyyy-MM-dd'))),",
				"     partitionFileNames:[(concat(substring($file_name,1,instr($file_name,'.')-1),'.parquet'))],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          ORDER_ID,",
				"          ORDER_DATETIME,",
				"          CUSTOMER_ID,",
				"          ORDER_STATUS,",
				"          STORE_ID,",
				"          order_date,",
				"          updated_timestamp",
				"     ),",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}